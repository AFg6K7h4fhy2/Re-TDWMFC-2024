
"""
    Plots and or saves the executed
    cliodynamics model results. The file name
    included the model name, the configuration
    file, and the date as (ISO 8601). The PDF
    or image file metadata contains the
    Python code and toml file contents for the
    images produced therein. Overwrite defaults
    to False. Parameter box defaults to False.

    Parameters
    ----------
    model_name : str
        The name of the model used. Usually is
        either DFM or DWM.
    config : dict[str, str | float | int | list[int] | list[float]]
        A dictionary of model specifications,
        parameters, and variables. The
        following parameters and variables
        are permitted to be lists: init_N,
        init_S, init_rho, init_s, init_k,
        max_k, c, r, beta.
    y0s : list[jax.Array]
        The initial variable values for
        the model.
    args : list[jax.Array]
        Different combinations of parameters
        for the specified model.
    sols : list[jax.Array]
        A list of ODE solutions corresponding
        to different combinations of variables
        and parameters of the specified model.
    model_input : dict[str, list[float] | list[int]]
        Parameters and their values for the
        specified model.
    save_name : str
        What to name the output file.
    overwrite : bool
        Whether to overwrite a saved output
        file. Defaults to False.
    param_box : bool
        Whether to use a parameter box showing
        the values of parameters used in the
        model.
    style : str
        The name of the style file to use for
        plotting. Defaults to None, i.e.
        matplotlib's default style.

    Returns
    -------
    None
        A PDF or image of the figures produced.
    """

# plot as an image if there is only a
# single plot (all vars and params len 1
# or just one that is not len 1),
# otherwise plot as a pdf
plot_as_img = (
    sum(
        [
            0 if len(elt) == 1 else 1
            for elt in len_model_vars_and_params.values()
        ]
    )
    <= 1
)

if param_box:
    figure.subplots_adjust(bottom=0.5)
    param_list = "; ".join(
        [
            f"{LABELS[_]}={', '.join([str(round(e, 2)) for e in config[_]])}"
            for _ in model_vars_and_params
            if _ != k
        ]
    )
    figure.text(
        0.5,  # center
        0.02,  # near bottom
        f"Parameters: {param_list}",
        ha="center",
        va="top",
        fontsize=12,
        bbox=dict(
            facecolor="white",
            edgecolor="black",
            boxstyle="round,pad=0.5",
        ),
    )



if param_box:
        figure.subplots_adjust(bottom=0.5)
        param_list = "; ".join(
            [
                f"{LABELS[_]}={', '.join([str(round(e, 2)) for e in config[_]])}"
                for _ in model_vars_and_params
                if _ != k
            ]
        )
        figure.text(
            0.5,  # center
            0.02,  # near bottom
            f"Parameters: {param_list}",
            ha="center",
            va="top",
            fontsize=12,
            bbox=dict(
                facecolor="white",
                edgecolor="black",
                boxstyle="round,pad=0.5",
            ),
        )

    # # get model name
    # model_name = "DFM" if args.DFM else "DWM"
    # # get model results
    # #sols, entries, input_dict = run_model(config=config, model=model_name)
    # # plot and (possibly) save
    # plot_and_save_to_pdf(
    #     model=model_name,
    #     sols=sols,
    #     entries=entries,
    #     input_dict=input_dict,
    #     config=config,
    #     to_save_as_pdf=args.save_as_pdf,
    #     to_save_as_img=args.save_as_img,
    #     overwrite=args.overwrite,
    #     param_box=args.param_box,
    #     save_path=args.save_path,
    #     style=args.style,
    # )

def run_model(
    config: dict[str, float | int | list[int] | list[float]], model: str
) -> tuple[
    list[jax.Array], list[list[float]], dict[str, list[float] | list[int]]
]:
    """
    Run a single cliodynamics model using
    the configured variables and parameters.

    Parameters
    ----------
    config : dict[str, str | float | int | list[int] | list[float]]
        A dictionary of model specifications,
        parameters, and variables. The
        following parameters and variables
        are permitted to be lists: init_N,
        init_S, init_rho, init_s, init_k,
        max_k, c, r, beta.

    Returns
    -------
    tuple[list[jax.Array], list[list[float]],  dict[str, list[float] | list[int]]]
        The solutions, arguments, and initial
        variables for the experiments desired.
    """
    # get model times from config
    t0 = config["t0"]
    t1 = config["t1"]
    dt0 = config["dt0"]
    saveat = diffrax.SaveAt(ts=jnp.linspace(t0, t1, t1 - t0))
    # choose solver
    # TODO: justify solver choice
    solver = diffrax.Tsit5()
    # get appropriate model and args
    if model == "DFM":
        term = diffrax.ODETerm(DFM)
        input_dict = {
            k: config[k]
            for k in ["r", "init_rho", "beta", "init_k", "c", "init_s"]
        }
    if model == "DWM":
        term = diffrax.ODETerm(DWM)
        input_dict = {
            k: config[k]
            for k in [
                "r",
                "init_rho",
                "beta",
                "alpha",
                "d",
                "g",
                "c",
                "init_k",
            ]
        }
    # get combinations of parameters, group
    # by each parameter
    y0s = [
        jnp.array(pair)
        for pair in list(it.product(config["init_N"], config["init_S"]))
    ]
    args = [
        jnp.array(group)
        for group in list(
            it.product(
                *list(input_dict.values()),
            )
        )
    ]
    # get model solutions
    sols = [
        diffrax.diffeqsolve(
            term, solver, t0, t1, dt0, y0, args=arg, saveat=saveat
        )
        for y0 in y0s
        for arg in args
    ]
    entries = [
        y0.tolist() + arg.tolist()
        for i, y0 in enumerate(y0s)
        for j, arg in enumerate(args)
    ]
    return (sols, entries, input_dict)


def plot_and_save_to_pdf(
    model: str,
    sols: list[ArrayLike],
    entries: list[list[float]],
    input_dict: dict[str, list[float] | list[int]],
    config: dict[str, float | int | list[int] | list[float]],
    to_save_as_pdf: bool,
    to_save_as_img: bool,
    overwrite: bool,
    param_box: bool,
    save_path: str,
    style: str,
) -> None:
    # use grayscale for plotting, if
    # no style is provided
    base_style_path = pathlib.Path("../assets/styles")
    if style != "default":
        style_path = base_style_path / (style + ".mplstyle")
        if style_path.exists():
            plt.style.use(str(style_path))
            print(f"Loaded style: {style}.")
        else:
            raise FileNotFoundError(f"Style file {style}.mplstyle not found.")
    else:
        plt.style.use("grayscale")
    # associate the correctly ordered variables
    # and parameters with indices
    len_each_key = {
        k: len(v) for k, v in config.items() if k not in NON_LISTLIKE_KEYS
    }
    full_var_params = CONFIG_VARS + list(input_dict.keys())
    full_var_params_indices = list(range(len(full_var_params)))
    var_param_by_index = {
        k: i for i, k in zip(full_var_params_indices, full_var_params)
    }
    sols_and_entries = list(zip(sols, entries))

    # set up PDF saving:
    # save_path =
    # with PdfPages('output.pdf') as pdf:
    # plot by groups of variables and parameters
    for k, v in var_param_by_index.items():
        # variables or parameters of length
        # one are taken into account below
        if len_each_key[k] > 1:
            exclude_index = var_param_by_index[k]
            # NEED to sort groups before
            # it.groupby!!!; remember
            # s_e[1][i] gets the ith entry of
            # y0.tolist() + arg.tolist()
            sorted_group_data = sorted(
                sols_and_entries,
                key=lambda s_e: tuple(
                    s_e[1][i] for i in range(len(s_e[1])) if i != exclude_index
                ),
            )
            groups_for_k = [
                list(group)
                for _, group in it.groupby(
                    sorted_group_data,
                    key=lambda s_e: tuple(
                        s_e[1][i]
                        for i in range(len(s_e[1]))
                        if i != exclude_index
                    ),
                )
            ]
            for i, group in enumerate(groups_for_k):
                figure, axes = plt.subplots(nrows=1, ncols=2, figsize=(10, 5))
                axes[0].set_title(f"{model}: Population Change", fontsize=20)
                axes[0].set_ylabel(r"$N$", rotation=90, fontsize=15)
                axes[0].set_xlabel("t", fontsize=20)
                axes[1].set_title(f"{model}: State Resources", fontsize=20)
                axes[1].set_ylabel(r"$S$", rotation=90, fontsize=15)
                axes[1].set_xlabel("t", fontsize=20)
                for elt in group:
                    sol = elt[0]
                    N, S = sol.ys.T
                    # S = jnp.maximum(S, 0.0)
                    timepoints = sol.ts
                    param_val = elt[1][var_param_by_index[k]]
                    axes[0].plot(
                        timepoints.tolist(),
                        N.tolist(),
                        label=rf"{LABELS[k]}={round(param_val, 2)}",
                    )
                    axes[1].plot(
                        timepoints.tolist(),
                        S.tolist(),
                        label=rf"{LABELS[k]}={round(param_val, 2)}",
                    )

                if param_box:
                    figure.subplots_adjust(bottom=0.5)
                    param_list = "; ".join(
                        [
                            f"{LABELS[_]}={', '.join([str(round(e, 2)) for e in config[_]])}"
                            for _ in full_var_params
                            if _ != k
                        ]
                    )
                    figure.text(
                        0.5,  # center
                        0.02,  # near bottom
                        f"Parameters: {param_list}",
                        ha="center",
                        va="top",
                        fontsize=12,
                        bbox=dict(
                            facecolor="white",
                            edgecolor="black",
                            boxstyle="round,pad=0.5",
                        ),
                    )
                axes[0].legend()
                axes[1].legend()
                # limit setting must come
                # after axes.plot()
                axes[1].set_xlim(xmin=0)
                axes[1].set_ylim(ymin=0)
                axes[0].set_xlim(xmin=0)
                axes[0].set_ylim(ymin=0)
                plt.show()

loaded_entries = list(config.keys())
    if not set(loaded_entries).issubset(set(CONFIG_ITEMS_ALL)):
        diff = set(loaded_entries).difference(set(CONFIG_ITEMS_ALL))
        raise ValueError(
            f"Foreign keys present in the config: {diff}.\nAccepted: {set(CONFIG_ITEMS_ALL)}"
        )
if sorted(loaded_entries) != sorted(CONFIG_ENTRIES):
        default_config_path = pathlib.Path("../config/default.toml")
        if not default_config_path.is_file():
            raise FileNotFoundError(
                f"Default config file not found: {default_config_path}"
            )
        try:
            default_config = toml.load(default_config_path)
        except Exception as e:
            raise Exception(f"Error while loading default TOML: {e}")
        default_entries = list(default_config.keys())
        diff_default = set(default_entries).difference(set(loaded_entries))
        diff_dict = {
            k: default_config[k]
            for k in list(diff_default)
            if k not in loaded_entries
        }
        config = {**config, **diff_dict}



groups_for_k = ""
            groups_for_k_03 = [
                list(group)
                for _, group in it.groupby(
                    sols_and_entries,
                    key=lambda s_e: s_e[1][full_entry_indices[k]] in config[k],
                )
            ]
            print(len(groups_for_k_03))
            groups_for_k_01 = [
                list(group)
                for _, group in it.groupby(
                    sols_and_entries,
                    key=lambda s_e: s_e[1][full_entry_indices[k]],
                )
            ]
            print(len(groups_for_k_01))
            groups_for_k_02 = [
                list(group)
                for _, group in it.groupby(
                    sols_and_entries,
                    key=lambda s_e: tuple(
                        [
                            s_e[1][i]
                            for i in [
                                e
                                for e in full_entry_indices.values()
                                if e != full_entry_indices[k]
                            ]
                        ]
                    ),
                )
            ]
            print(len(groups_for_k_02))
            if len(groups_for_k_01) == exact_group_count:
                groups_for_k = groups_for_k_01
            if len(groups_for_k_02) == exact_group_count:
                groups_for_k = groups_for_k_02
